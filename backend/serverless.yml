# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: shoppingcart
# app and org for use with dashboard.serverless.com
app: shoppingcart
org: jcpince

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '1'

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-canary-deployments
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-offline-sns

custom:
  usersTableName: 'shoppingcart-users-${self:provider.stage}'
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
      stages:
        - dev
      start:
        port: 8000
        inMemory: true
        heapInitial: 200m
        heapMax: 1g
        migrate: true
        seed: true
        convertEmptyValues: true
      # Uncomment only if you already have a DynamoDB running locally
      # noStart: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-3'}
  
  environment:
    USERS_TABLE: ${self:custom.usersTableName}
    BACKEND_NAME: "AWS"
    _X_AMZN_TRACE_ID: "toto"

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  hello:
    handler: src/handler.hello
    events:
      - http:
          method: get
          path: /toto
          cors: true
          authorizer: Auth
  
  registerUser:
    handler: src/lambda/users/AddUser.handler
    events:
      - http:
          method: put
          path: /users/add
          cors: true
          authorizer: Auth
  
  unregisterUser:
    handler: src/lambda/users/DelUser.handler
    events:
      - http:
          method: delete
          path: /users/delete
          cors: true
          authorizer: Auth
  
  connectUser:
    handler: src/lambda/users/ConnectUser.handler
    events:
      - http:
          method: put
          path: /users/connect
          cors: true
          authorizer: Auth
  
  # addShoppingItem:
  #   handler: src/lambda/shopping/addShoppingItem.handler
  #   events:
  #     - http:
  #         method: post
  #         path: /cart
  #         cors: true
    
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS_TABLE}
        # LocalSecondaryIndexes:
        #   - IndexName: userIndex
        #     KeySchema:
        #       - AttributeName: uuid
        #         KeyType: HASH
        #       - AttributeName: name
        #         KeyType: RANGE
        #     Projection:
        #       ProjectionType: ALL # What attributes will be copied to an index
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
